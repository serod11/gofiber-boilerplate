// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/serod11/gofiber-boilerplate/pkg/repo (interfaces: BookRepo)
//
// Generated by this command:
//
//	mockgen -package mock -destination test/mock/mock_book_repo.go github.com/serod11/gofiber-boilerplate/pkg/repo BookRepo
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/serod11/gofiber-boilerplate/pkg/model"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockBookRepo is a mock of BookRepo interface.
type MockBookRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepoMockRecorder
}

// MockBookRepoMockRecorder is the mock recorder for MockBookRepo.
type MockBookRepoMockRecorder struct {
	mock *MockBookRepo
}

// NewMockBookRepo creates a new mock instance.
func NewMockBookRepo(ctrl *gomock.Controller) *MockBookRepo {
	mock := &MockBookRepo{ctrl: ctrl}
	mock.recorder = &MockBookRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepo) EXPECT() *MockBookRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookRepo) Create(arg0 *gorm.DB, arg1 model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBookRepoMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookRepo)(nil).Create), arg0, arg1)
}

// CreateTxn mocks base method.
func (m *MockBookRepo) CreateTxn() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTxn")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// CreateTxn indicates an expected call of CreateTxn.
func (mr *MockBookRepoMockRecorder) CreateTxn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTxn", reflect.TypeOf((*MockBookRepo)(nil).CreateTxn))
}

// FindAll mocks base method.
func (m *MockBookRepo) FindAll() ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockBookRepoMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockBookRepo)(nil).FindAll))
}

// FindById mocks base method.
func (m *MockBookRepo) FindById(arg0 uint) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockBookRepoMockRecorder) FindById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockBookRepo)(nil).FindById), arg0)
}
